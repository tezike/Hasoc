# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/dataset.dataset.ipynb (unless otherwise specified).

__all__ = ['BertDataset']

# Cell
import os
import torch
import transformers

import pandas as pd
import numpy as np
import Hasoc.config as config

# Cell
class BertDataset(torch.utils.data.Dataset):
    def __init__(self,text, target=None, is_test=False):
        self.text, self.target = text, target
        self.tokenizer = config.TOKENIZER
        self.max_len = config.MAX_LEN
        self.is_test = is_test

    def __len__(self):
        return len(self.target)

    def __getitem__(self, i):
        # sanity check
        text = ' '.join(self.text[i].split())

        # tokenize using Huggingface tokenizers
        out = self.tokenizer.encode_plus(text, None,
                                   add_special_tokens=True,
                                   max_length = self.max_len,
                                   truncation=True)

        ids = out['input_ids']
        mask = out['attention_mask']
        token_type_ids = out['token_type_ids']

        padding_length = self.max_len - len(ids)
        ids = ids + ([0] * padding_length)
        mask = mask + ([0] * padding_length)
        token_type_ids = token_type_ids + ([0] * padding_length)

        if not self.is_test:
            return {
                'input_ids': torch.tensor(ids, dtype=torch.long),
                'attention_mask': torch.tensor(mask, dtype=torch.long),
                'token_type_ids': torch.tensor(token_type_ids, dtype=torch.long),
                'targets': self.onehot(len(np.unique(self.target)), self.target[i])
            }
        else:
            return{
                'input_ids': torch.tensor(ids, dtype=torch.long),
                'attention_mask': torch.tensor(mask, dtype=torch.long),
                'token_type_ids': torch.tensor(token_type_ids, dtype=torch.long),
            }

    @staticmethod
    def onehot(size, target):
        vec = torch.zeros(size, dtype=torch.long)
        vec[target] = 1.
        return vec

    def get_labels(self):
        return list(self.target)