# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/en_task.run_folds_task1.ipynb (unless otherwise specified).

__all__ = ['SEED', 'df', 'le', 'test_df', 'run', 'ensemble']

# Cell
import os

import torch
import torch.nn as nn
import torch.optim as optim
import pandas as pd
import numpy as np
import transformers

import Hasoc.config as config
import Hasoc.utils.utils as utils
import Hasoc.utils.engine as engine
import Hasoc.model.model as model
import Hasoc.dataset.dataset as dataset

from functools import partial
from sklearn.metrics import f1_score
from sklearn.preprocessing import LabelEncoder
from transformers import AdamW, get_linear_schedule_with_warmup

# Cell
SEED = 42
utils.seed_everything(SEED)

# Cell
df = pd.read_csv(config.DATA_PATH/'fold_df.csv')

# Cell
le = LabelEncoder()
le.fit_transform(df.task1)
le.classes_

# Cell
df['task1_encoded'] = le.transform(df.task1.values)

# Cell
test_df = pd.read_csv(config.DATA_PATH/'en_task_a/english_test.csv')

# Cell
def run(fold, num_epochs=6):
    #export
    NUM_EPOCHS = num_epochs
    train_df = df.query(f'kfold_task1!={fold}').reset_index(drop=True)
    valid_df = df.query(f'kfold_task1=={fold}').reset_index(drop=True)

    #export
    train_dl = utils.create_loader(train_df.text.values, train_df.task1_encoded, bs=config.TRAIN_BATCH_SIZE)
    valid_dl = utils.create_loader(valid_df.text.values, valid_df.task1_encoded, bs=config.VALID_BATCH_SIZE)

    #export
    modeller = model.HasocModel(len(le.classes_))

    #export
    model_params = list(modeller.named_parameters())

    #export
    # we don't want weight decay for these
    no_decay = ['bias', 'LayerNorm.weight', 'LayerNorm.bias']

    optimizer_params = [
        {'params': [p for n, p in model_params if n not in no_decay],
        'weight_decay':0.001},
        #  no weight decay should be applied
        {'params': [p for n, p in model_params if n in no_decay],
        'weight_decay':0.0}
    ]

    #export
    lr = config.LR

    #export
    optimizer = AdamW(optimizer_params, lr=lr)

    #export
    num_train_steps = int(len(df) / config.TRAIN_BATCH_SIZE * config.NUM_EPOCHS)

    #export
    scheduler = get_linear_schedule_with_warmup(optimizer=optimizer,
                                                    num_warmup_steps=30,
                                                    num_training_steps=num_train_steps-30)

    #export
    fit = engine.BertFitter(modeller, (train_dl, valid_dl), optimizer, nn.CrossEntropyLoss(), partial(f1_score, average='macro'), config.DEVICE, scheduler=scheduler, log_file='en_task1_log.txt')
    # fit = engine.BertFitter(modeller, (train_dl, valid_dl), optimizer, utils.LabelSmoothingCrossEntropy(), partial(f1_score, average='macro'), config.DEVICE, scheduler=scheduler, log_file='en_task1_log.txt')

    fit.fit(NUM_EPOCHS, model_path=os.path.join(config.MODEL_PATH/f'en_task1_{fold}.pth'), show_graph=False)

    #export
    test_dl = utils.create_loader(test_df.text.values, lbls=[None]*len(test_df.text.values), bs=config.VALID_BATCH_SIZE, is_test=True)

    #export
    modeller = model.HasocModel(len(le.classes_))
    modeller.load_state_dict(torch.load(config.MODEL_PATH/f'en_task1_{fold}.pth'))

    #export
    preds = engine.get_preds(test_dl.dataset, test_dl, modeller, config.DEVICE, ensemble_proba=True)

    np.save(os.path.join('..', 'outputs', f'submission_EN_A_{fold}.npy'), preds)

# Cell
for i in range(5):
    run(i)

# Cell
def ensemble():
    preds_0 = np.load(os.path.join('..', 'outputs', f'submission_EN_A_0.npy'))
    preds_1 = np.load(os.path.join('..', 'outputs', f'submission_EN_A_1.npy'))
    preds_2 = np.load(os.path.join('..', 'outputs', f'submission_EN_A_2.npy'))
    preds_3 = np.load(os.path.join('..', 'outputs', f'submission_EN_A_3.npy'))
    preds_4 = np.load(os.path.join('..', 'outputs', f'submission_EN_A_4.npy'))

    preds = (preds_0 + preds_1 + preds_2 + preds_3 + preds_4) / 5

    preds = le.inverse_transform(torch.tensor(preds).argmax(dim=-1).numpy())

    #export
    sub = pd.read_csv(config.DATA_PATH/'en_task_a/english_test.csv')

    #export
    submission_en_task1_df = test_df.drop(columns=['text', 'task1', 'task2']).copy()

    #export
    submission_en_task1_df['task1'] = preds

    #export
    submission_en_task1_df.to_csv(os.path.join('..', 'outputs', f'submission_EN_A.csv'), index=False)

# Cell
ensemble()